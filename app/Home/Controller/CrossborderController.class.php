<?php
// +----------------------------------------------------------------------
// | Copyright (c) 2015-2017 http://www.ebpays.com All rights reserved.
// +----------------------------------------------------------------------
// | Author: xiaofeng<1034023036@qq.com>
// +----------------------------------------------------------------------


namespace Home\Controller;


use Home\Controller\HomebaseController;

class CrossborderController extends HomebaseController
{
    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    function index()
    {
        $this->display();
    }

    function turnFoOrderPage()
    {
        //公共页面，判断权限
        if (IS_POST and IS_AJAX) {
            $id = I('id');
            $payout_audit = M('payout')->where(array('payout_id' => $id))->find();
            $sl_data['payout_id'] = $id;
            $sl_data['batchnum'] = $payout_audit['batchnum'];
            $sl_data['reaccname'] = $payout_audit['reaccname'];
            $sl_data['reaccno'] = $payout_audit['reaccno'];
            $sl_data['bankname'] = getBankName($payout_audit['bankname']);
            $sl_data['transfermoney'] = $payout_audit['transfermoney'];
            $sl_data['free'] = $payout_audit['free'];
            $sl_data['remark'] = $payout_audit['remark'];
            $sl_data['ok'] = 1;
            $this->ajaxReturn($sl_data, 'json');
        } else {
            $key = I('key');
            $status = I('status', '');
//            $sldate = I('reservation', '');//获取格式 2015-11-12 - 2015-11-18
            $begin_time = I('begin_time', '');
            $end_time = I('end_time', '');
            if (empty($begin_time) and empty($end_time)) {
                $begin_time = date('Y-m-d');
                $end_time = date('Y-m-d');
            }
            $sldate = $begin_time . ' - ' . $end_time;
            if (strpos($sldate, '+')) {
                $sldate = preg_replace('/\+/', ' ', $sldate);
            }
            $arr = explode(" - ", $sldate);//转换成数组
            if (count($arr) == 2) {
                $arrdateone = strtotime($arr[0]);
                $arrdatetwo = strtotime($arr[1] . ' 23:55:55');
                $map['begin_time'] = array(array('egt', $arrdateone), array('elt', $arrdatetwo), 'AND');
            }
            if ($status != '') {
                $map['status'] = array('eq', $status);
            }
            $map['type'] = 4;
            $map['payout_orderid|reaccname|reaccno'] = array('like', "%" . $key . "%");
            $map['uid'] = $this->user['member_list_userinfoid'];
            $map['_logic'] = 'AND';
            /*
             * 分页操作
             */
            $count = M('payout')->where($map)->count();// 查询满足要求的总记录数
            $Page = new \Think\Page($count, 10);// 实例化分页类 传入总记录数和每页显示的记录数
            $show = $Page->show();// 分页显示输出
            $payout_list = M('payout')->where($map)->limit($Page->firstRow . ',' . $Page->listRows)->order('payout_id desc')->select();
            $payout_list_e = M('payout')->where($map)->order('payout_id desc')->select();

            $num = "";
            $a_OrderMoney = "";
            $a_free = "";
            foreach ($payout_list_e as $k => $r) {
                if ($r['status'] == '4') {
                    $num = $num + 1;
                    $a_OrderMoney = $a_OrderMoney + $r['transfermoney'];
                    $a_free = $a_free + $r['free'];
                }
            }
//导出结果
            $action = I('action');
            if ($action == 'export') {
                if (!$payout_list_e) {
                    $this->error('没有搜索结果，无法导出数据');
                }
                $this->goods_export($payout_list_e, 'turnFoOrderPage');
            }

            $this->assign('num', $num);
            $this->assign('a_OrderMoney', $a_OrderMoney);
            $this->assign('a_free', $a_free);

            $this->assign('status', $status);
            $this->assign('sldate', $sldate);
            $this->assign('begin_time', $begin_time);
            $this->assign('end_time', $end_time);
            $this->assign('keyy', $key);
            $this->assign('payout_list', $payout_list);
            $this->assign('page', $show);
            $this->assign('val', $key);
            $this->display();

        }

    }

    function exchange()
    {
        $this->display();
    }

    function turnOneToBankPage()
    {
        if (IS_POST) {
            //获取商户信息
            $currency_id = '1';
            $transfermoney = I('transfermoney');
            $settlement_currency_id = I('sett_currency');

            $time = strtotime(date('Y-m-d'));
            //查看当天的港币和美元的汇率是否存在活动的
            $where['status'] = 1;
            $where['currency_code'] = array('in', 'HKD,USD');
            $where['update_at'] = array('gt',$time);
            $curoffer_list = M('curoffer')->where($where)->select();
            foreach ($curoffer_list as $v) {
                if ($v['currency_code']=='USD') {
                    $usd = 100 / $v['cursell'];
                }
                if ($v['currency_code']=='HKD') {
                    $hkd = 100 / $v['cursell'];
                }
            }
            if ($settlement_currency_id ==2) {
                //usd
                $settlement_money = $transfermoney*$usd;
            }elseif($settlement_currency_id==3){
                //hkd
                $settlement_money = $transfermoney*$hkd;
            }else{
                $settlement_money = $transfermoney;
            }
            if ($transfermoney < 1) {
                $this->error('請填寫正確的訂單金額！', U('turnOneToBankPage'), 0);
            }
            $user_balance = M('user_balance')->where(array('user_id' => $this->user['member_list_userinfoid'], 'currency_id' => $currency_id));
            $user = M('userinfo')->where(array('user_id' => $this->user['member_list_userinfoid']))->find();
            $user_balance_list = $user_balance->find();
            $sub_user_balance_list = M('sub_user_balance')->where(array('sub_balance_id' => I('sub_balance')))->find();
            if ($sub_user_balance_list) {
                $sub_sumcount = $sub_user_balance_list['sub_user_balance'];
                $attribute = $sub_user_balance_list['attribute'];
                $mid = $sub_user_balance_list['m_id'];
            } else {
                $this->error('請選擇子賬戶', U('turnOneToBankPage'), 0);
            }
            $sumcount = floatval($user_balance_list['sumcount']);  //总金额
            $availablecount = floatval($user_balance_list['availablecount']); //可用余额
            //获取出金手续费
            $payout_rate_list = getPayoutRate($user['payout_rate']);
            $free = floatval($payout_rate_list['outrate']); //手续费
            $free_c = floatval($payout_rate_list['outrate'] - $payout_rate_list['outprice']); //公司佣金
            $free_ag = floatval($payout_rate_list['outrate'] - $payout_rate_list['outprice']); //代理佣金
            $outmax = floatval($payout_rate_list['outmax']);
            //确认是否可以出金
            $oneTransferMoney = getOrderNumber($transfermoney, $outmax);
            $payout_num = count($oneTransferMoney);
            //计算总的出金费率
            $allfree = $free * $payout_num;
            $alltransfermoney = $allfree + $transfermoney;

            if ($alltransfermoney <= $availablecount && $alltransfermoney <= $sub_sumcount) {
                //单笔超过最大限额，拆分订单
                if ($payout_num > 1) {
                    //拆分出金数量
                    $availablecount = $user_balance_list['availablecount'] - $transfermoney - $allfree; //可用余额
                    $unsettlement = $user_balance_list['unsettlement'] + $transfermoney + $allfree; //未结算金额
                    $userinfo_data = array(
                        'availablecount' => $availablecount,
                        'unsettlement' => $unsettlement,
                    );
                    if (payoutSubUserBalanceUpdate(I('sub_balance'), $transfermoney + $allfree)) {
                        $u_userinfo = $user_balance->where(array('user_id' => $this->user['member_list_userinfoid'], 'currency_id' => $currency_id))->save($userinfo_data);
                    } else {
                        $this->error('子賬戶餘額不夠，請重新填寫訂單！', U('turnOneToBankPage'), 0);
                    }
                    if ($u_userinfo) {
                        for ($i = 0; $i < $payout_num; $i++) {
                            //批量插入数据库
                            $payout_orderid = 'o' . createOrder($this->user['member_list_id']);
                            $batchnum = $this->user['member_list_id'] . 'o' . 'p' . date('YmdHis');
                            $payout_data = array(
                                'uid' => $this->user['member_list_userinfoid'],
                                'member_name' => $user['member_name'],
                                'payout_orderid' => $payout_orderid,
                                'payout_mid' => $mid,
                                'attribute' => $attribute,
                                'batchnum' => $batchnum,
                                'type' => 4,
                                'currency_id' => $currency_id,
                                'reaccname' => I('reaccname'),
                                'reaccno' => I('reaccno'),
                                'bankname' => I('bankname'),
                                'proname' => I('proname'),
                                'cityname' => I('cityname'),
                                'townname' => I('townname'),
                                'reaccdept' => I('reaccdept'),
                                'transfermoney' => $oneTransferMoney[$i],
                                'status' => 1,
                                'free' => $free,
                                'payout_commission_c' => $free_c,
                                'payout_commission_ag' => $free_ag,
                                'begin_time' => time(),
                                'remark' => I('remark'),
                            );
                            //存入数据到表单
                            if (checkPayoutOrderId($payout_orderid)) {
                                if (M('payout')->add($payout_data)) {

                                    //發送給自己組

                                    $userChatId = getChatId($this->user['member_list_userinfoid'],1);
                                    if (isset($userChatId)) {
                                        $message_master = "<code>銀行:" . getBankName(I('bankname')) . "</code>%0A<code>收款人: " . I('reaccname') . "</code>%0A<code>銀行賬號: " . I('reaccno') . "</code>%0A<code>金額: CNY " . number_format($transfermoney, 2, '.', ',') . "</code>%0A%0A<code>出金客戶: " . $user['member_name'] . "</code>%0A<code>更新日期: " . date('Y-m-d') . "</code>%0A<code>更新時間: " . date('H:i:s') . "</code>%0A<code>單號: " . $payout_orderid . "</code>";

                                        telegramSendMessage($userChatId, $message_master);
                                    }

                                    $chatId_master = '-210815722';
                                    $message_master = "<code>供應商: " . getPaymentName($user['payout_id']) . "</code>%0A<code>MID: " . getMidName($user['payout_mid']) . "</code>%0A<code>銀行:" . getBankName(I('bankname')) . "</code>%0A<code>收款人: " . I('reaccname') . "</code>%0A<code>銀行賬號: " . I('reaccno') . "</code>%0A<code>金額: CNY " . number_format($transfermoney, 2, '.', ',') . "</code>%0A%0A<code>出金客戶: " . $user['member_name'] . "</code>%0A<code>更新日期: " . date('Y-m-d') . "</code>%0A<code>更新時間: " . date('H:i:s') . "</code>%0A<code>單號: " . $payout_orderid . "</code>";

                                    telegramSendMessage($chatId_master, $message_master);


                                    //写入日志信息
                                    $content = '出金记录写入成功。订单号：' . $payout_orderid . '###出金金额' . $oneTransferMoney[$i] . '###手续费' . $free . '###总额：' . $sumcount . '###可用余额：' . $availablecount . '###未结算金额：' . $unsettlement . '';
                                    $logResult = addLog($this->user['member_list_id'], 1, 'payout', '单笔出金', $content);
                                } else {
                                    //写入失败日志信息
                                    $content = '出金记录写入失败。订单号：' . $payout_orderid . '###出金金额' . $oneTransferMoney[$i] . '###手续费' . $free . '###总额：' . $sumcount . '###可用余额：' . $availablecount . '###未结算金额：' . $unsettlement . '';
                                    $logResult = addLog($this->user['member_list_id'], 2, 'payout', '单笔出金', $content);
                                }

                            } else {
                                $this->error('订单错误，请重新提交', U('turnFoOrderPage'), 0);
                            }
                        }
                        $this->success('订单提交成功', U('turnFoOrderPage'), 1);
                    } else {
                        $this->error('订单提交失败', U('turnOneToBankPage'), 0);
                    }

                } else {
                    //单笔出金没超过最大限额的情况
                    $payout_orderid = 'o' . createOrder($this->user['member_list_id']);
                    $batchnum = $this->user['member_list_id'] . 'o' . 'p' . date('YmdHis');
                    $payout_data = array(
                        'uid' => $this->user['member_list_userinfoid'],
                        'member_name' => $user['member_name'],
                        'payout_mid' => $mid,
                        'attribute' => $attribute,
                        'payout_orderid' => $payout_orderid,
                        'batchnum' => $batchnum,
                        'type' => 4,
                        'currency_id' => $settlement_currency_id,
                        'settlementmoney' => $settlement_money,
                        'reaccname' => I('reaccname'),
                        'reaccno' => I('reaccno'),
                        'bankname' => I('bankname'),
                        'proname' => I('proname'),
                        'cityname' => I('cityname'),
                        'townname' => I('townname'),
                        'reaccdept' => I('reaccdept'),
                        'transfermoney' => $transfermoney,
                        'status' => 1,
                        'free' => $free,
                        'payout_commission_c' => $free_c,
                        'payout_commission_ag' => $free_ag,
                        'begin_time' => time(),
                        'remark' => I('remark'),
                    );
                    //写入记录，更新总额，写入日志
                    if (checkPayoutOrderId($payout_orderid) and M('payout')->add($payout_data)) {
                        //扣去总金额更新用户信息表
//                        $sumcount = $userinfo_list['sumcount'] - $transfermoney - $free;  //总金额
                        $availablecount = $user_balance_list['availablecount'] - $transfermoney - $free; //可用余额
                        $unsettlement = $user_balance_list['unsettlement'] + $transfermoney + $free; //未结算金额
                        $userinfo_data = array(
                            'availablecount' => $availablecount,
                            'unsettlement' => $unsettlement,
                        );
                        if (payoutSubUserBalanceUpdate(I('sub_balance'), $transfermoney + $allfree)) {
                            $u_userinfo = $user_balance->where(array('user_id' => $this->user['member_list_userinfoid'], 'currency_id' => $currency_id))->save($userinfo_data);
                        } else {
                            $this->error('子賬戶餘額不夠，請重新填寫訂單！', U('turnOneToBankPage'), 0);
                        }
                        if ($u_userinfo) {
                            //發送給自己組
                            $userChatId = getChatId($this->user['member_list_userinfoid'],1);

                            if (isset($userChatId)) {
                                $message_master = "%0A<code>銀行:" . getBankName(I('bankname')) . "</code>%0A<code>收款人: " . I('reaccname') . "</code>%0A<code>銀行賬號: " . I('reaccno') . "</code>%0A<code>金額: CNY " . number_format($transfermoney, 2, '.', ',') . "</code>%0A%0A<code>出金客戶: " . $user['member_name'] . "</code>%0A<code>更新日期: " . date('Y-m-d') . "</code>%0A<code>更新時間: " . date('H:i:s') . "</code>%0A<code>單號: " . $payout_orderid . "</code>";

                                telegramSendMessage($userChatId, $message_master);

                            }

                            $chatId_master = '-210815722';
                            $message_master = "<code>供應商: " . getPaymentName($user['payout_id']) . "</code>%0A<code>MID: " . getMidName($user['payout_mid']) . "</code>%0A<code>銀行:" . getBankName(I('bankname')) . "</code>%0A<code>收款人: " . I('reaccname') . "</code>%0A<code>銀行賬號: " . I('reaccno') . "</code>%0A<code>金額: CNY " . number_format($transfermoney, 2, '.', ',') . "</code>%0A%0A<code>出金客戶: " . $user['member_name'] . "</code>%0A<code>更新日期: " . date('Y-m-d') . "</code>%0A<code>更新時間: " . date('H:i:s') . "</code>%0A<code>單號: " . $payout_orderid . "</code>";

                            telegramSendMessage($chatId_master, $message_master);

                            //写入日志信息
                            $content = '出金记录写入成功。订单号：' . $payout_orderid . '###出金金额' . $transfermoney . '###手续费' . $free . '###总额：' . $sumcount . '###可用余额：' . $availablecount . '###未结算金额：' . $unsettlement . '';
                            $logResult = addLog($this->user['member_list_id'], 1, 'payout', '单笔出金', $content);
                            $this->success('出金信息提交成功', U('turnFoOrderPage'), 1);
                        } else {
                            //写入失败日志信息
                            $content = '出金记录写入失败。订单号：' . $payout_orderid . '###出金金额' . $transfermoney . '###手续费' . $free . '###总额：' . $sumcount . '###可用余额：' . $availablecount . '###未结算金额：' . $unsettlement . '';
                            $logResult = addLog($this->user['member_list_id'], 2, 'payout', '单笔出金', $content);
                            $this->error('出金信息提交失败', U('turnFoOrderPage'), 0);
                        }
                    }

                }

            } else {
                $this->error('可用金额不足，请核对金额总数重新提交！', U('turnOneToBankPage'), 0);
            }
        } else {
            //获取用户配置信息
            $province = M('region')->where(array('parent_id' => 0, 'level' => 1))->select();
            $this->assign('province', $province);
            //
            $currency_list = M('currency')->select();
            $this->assign('currency_list', $currency_list);
            //
            $userinfo = M('userinfo')->where(array('user_id' => $this->user['member_list_userinfoid']))->find();  //获取用户的配置信息
            //获取出款的费率配置
            //子賬戶餘額
            $sub_balance_list = M('sub_user_balance')->where(array('user_id' => $this->user['member_list_userinfoid']))->select();
            $this->assign('sub_balance_list', $sub_balance_list);

            $payout_rate_list = M('payout_rate')->where(array('payout_rate_id' => $userinfo['payout_rate']))->find();
            $payout_rate = $payout_rate_list['outrate'];
            $this->assign('payout_rate', $payout_rate);
            $this->assign('userinfo', $userinfo);
            $this->display();
        }
    }

}